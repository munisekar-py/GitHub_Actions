name: Flask CI/CD Pipeline

on:
  push:
    branches: [main, staging]
  release:
    types: [published]

jobs:
  install-deps:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  run-tests:
    name: Run Pytest
    runs-on: ubuntu-latest
    needs: install-deps
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest || echo "No tests yet"

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-cicd-app:${{ github.ref_name }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging..."
          curl -X POST -H "Authorization: Bearer ${{ secrets.STAGING_API_KEY }}" ${{ secrets.STAGING_DEPLOY_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'release'
    steps:
      - name: Deploy to Production
        run: |
          echo "Deploying to production..."
          curl -X POST -H "Authorization: Bearer ${{ secrets.PROD_API_KEY }}" ${{ secrets.PROD_DEPLOY_URL }}
